//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DMS.BusinessLogic.DMSWebService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DMSUploadDownloadWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class DMSUploadDownloadWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadDocumentToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectRepNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadDocumentFromServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocumentCentrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectFolderCentrum2OperationCompleted;
        
        private System.Threading.SendOrPostCallback selectFolderCentrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback FrameCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentToServerSFTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentToServer1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentToServerCentrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUniqueFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMetaDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectErrorDocsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFolderAxisTrusteeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFolderCentrumOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadRepositoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadMetaTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadFolderAxisTrusteeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadMetaDataCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderIfNeededOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentToServer_AxisTrusteeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentToServer_FolderWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertFolderForOthersOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocument_RelianceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocument_SBIMutualOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocument_IDBIOperationCompleted;
        
        private System.Threading.SendOrPostCallback ErrorDocument_IDBIAhmOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectDocumentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExcelEntry_IDBIAhmOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectDocIdInExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertInExcelEntry_Error_IDBI_AhmOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetErrorDocsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocEntryStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDocNameInExcelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDocumentStatusIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DMSUploadDownloadWebService() {
            this.Url = global::DMS.BusinessLogic.Properties.Settings.Default.DMS_BusinessLogic_DMSWebService_DMSUploadDownloadWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadDocumentToServerCompletedEventHandler UploadDocumentToServerCompleted;
        
        /// <remarks/>
        public event SelectRepNameCompletedEventHandler SelectRepNameCompleted;
        
        /// <remarks/>
        public event DownloadDocumentFromServerCompletedEventHandler DownloadDocumentFromServerCompleted;
        
        /// <remarks/>
        public event CheckDocumentCompletedEventHandler CheckDocumentCompleted;
        
        /// <remarks/>
        public event CheckDocumentCentrumCompletedEventHandler CheckDocumentCentrumCompleted;
        
        /// <remarks/>
        public event selectFolderCentrum2CompletedEventHandler selectFolderCentrum2Completed;
        
        /// <remarks/>
        public event selectFolderCentrumCompletedEventHandler selectFolderCentrumCompleted;
        
        /// <remarks/>
        public event FrameCountCompletedEventHandler FrameCountCompleted;
        
        /// <remarks/>
        public event UploadDocumentToServerSFTPCompletedEventHandler UploadDocumentToServerSFTPCompleted;
        
        /// <remarks/>
        public event UploadDocumentToServer1CompletedEventHandler UploadDocumentToServer1Completed;
        
        /// <remarks/>
        public event UploadDocumentToServerCentrumCompletedEventHandler UploadDocumentToServerCentrumCompleted;
        
        /// <remarks/>
        public event GetUniqueFileNameCompletedEventHandler GetUniqueFileNameCompleted;
        
        /// <remarks/>
        public event InsertMetaDataCompletedEventHandler InsertMetaDataCompleted;
        
        /// <remarks/>
        public event InsertDocumentCompletedEventHandler InsertDocumentCompleted;
        
        /// <remarks/>
        public event SelectErrorDocsCompletedEventHandler SelectErrorDocsCompleted;
        
        /// <remarks/>
        public event InsertFolderCompletedEventHandler InsertFolderCompleted;
        
        /// <remarks/>
        public event InsertFolderAxisTrusteeCompletedEventHandler InsertFolderAxisTrusteeCompleted;
        
        /// <remarks/>
        public event InsertFolderCentrumCompletedEventHandler InsertFolderCentrumCompleted;
        
        /// <remarks/>
        public event LoadRepositoryCompletedEventHandler LoadRepositoryCompleted;
        
        /// <remarks/>
        public event LoadMetaTemplateCompletedEventHandler LoadMetaTemplateCompleted;
        
        /// <remarks/>
        public event LoadCategoryCompletedEventHandler LoadCategoryCompleted;
        
        /// <remarks/>
        public event LoadFolderCompletedEventHandler LoadFolderCompleted;
        
        /// <remarks/>
        public event LoadFolderAxisTrusteeCompletedEventHandler LoadFolderAxisTrusteeCompleted;
        
        /// <remarks/>
        public event LoadMetaDataCodeCompletedEventHandler LoadMetaDataCodeCompleted;
        
        /// <remarks/>
        public event LoadDocumentCompletedEventHandler LoadDocumentCompleted;
        
        /// <remarks/>
        public event AuthenticateUserCompletedEventHandler AuthenticateUserCompleted;
        
        /// <remarks/>
        public event CreateFolderIfNeededCompletedEventHandler CreateFolderIfNeededCompleted;
        
        /// <remarks/>
        public event UploadDocumentToServer_AxisTrusteeCompletedEventHandler UploadDocumentToServer_AxisTrusteeCompleted;
        
        /// <remarks/>
        public event UploadDocumentToServer_FolderWiseCompletedEventHandler UploadDocumentToServer_FolderWiseCompleted;
        
        /// <remarks/>
        public event InsertFolderForOthersCompletedEventHandler InsertFolderForOthersCompleted;
        
        /// <remarks/>
        public event CheckDocument_RelianceCompletedEventHandler CheckDocument_RelianceCompleted;
        
        /// <remarks/>
        public event CheckDocument_SBIMutualCompletedEventHandler CheckDocument_SBIMutualCompleted;
        
        /// <remarks/>
        public event CheckDocument_IDBICompletedEventHandler CheckDocument_IDBICompleted;
        
        /// <remarks/>
        public event ErrorDocument_IDBIAhmCompletedEventHandler ErrorDocument_IDBIAhmCompleted;
        
        /// <remarks/>
        public event SelectDocumentIDCompletedEventHandler SelectDocumentIDCompleted;
        
        /// <remarks/>
        public event ExcelEntry_IDBIAhmCompletedEventHandler ExcelEntry_IDBIAhmCompleted;
        
        /// <remarks/>
        public event SelectDocIdInExcelCompletedEventHandler SelectDocIdInExcelCompleted;
        
        /// <remarks/>
        public event InsertInExcelEntry_Error_IDBI_AhmCompletedEventHandler InsertInExcelEntry_Error_IDBI_AhmCompleted;
        
        /// <remarks/>
        public event GetErrorDocsCompletedEventHandler GetErrorDocsCompleted;
        
        /// <remarks/>
        public event GetDocEntryStatusCompletedEventHandler GetDocEntryStatusCompleted;
        
        /// <remarks/>
        public event CheckDocNameInExcelCompletedEventHandler CheckDocNameInExcelCompleted;
        
        /// <remarks/>
        public event UpdateDocumentStatusIdCompletedEventHandler UpdateDocumentStatusIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload File To Server", RequestElementName="Upload File To Server", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload File To ServerResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload File To ServerResult")]
        public bool UploadDocumentToServer(string filePath, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] objFileByte, bool boolIsNew, int intContentLength) {
            object[] results = this.Invoke("UploadDocumentToServer", new object[] {
                        filePath,
                        objFileByte,
                        boolIsNew,
                        intContentLength});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServerAsync(string filePath, byte[] objFileByte, bool boolIsNew, int intContentLength) {
            this.UploadDocumentToServerAsync(filePath, objFileByte, boolIsNew, intContentLength, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServerAsync(string filePath, byte[] objFileByte, bool boolIsNew, int intContentLength, object userState) {
            if ((this.UploadDocumentToServerOperationCompleted == null)) {
                this.UploadDocumentToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServerOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServer", new object[] {
                        filePath,
                        objFileByte,
                        boolIsNew,
                        intContentLength}, this.UploadDocumentToServerOperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServerOperationCompleted(object arg) {
            if ((this.UploadDocumentToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServerCompleted(this, new UploadDocumentToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get Repository Name from MetadataID", RequestElementName="Get Repository Name from MetadataID", RequestNamespace="http://tempuri.org/", ResponseElementName="Get Repository Name from MetadataIDResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Get Repository Name from MetadataIDResult")]
        public System.Data.DataSet SelectRepName(int MetadataID) {
            object[] results = this.Invoke("SelectRepName", new object[] {
                        MetadataID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectRepNameAsync(int MetadataID) {
            this.SelectRepNameAsync(MetadataID, null);
        }
        
        /// <remarks/>
        public void SelectRepNameAsync(int MetadataID, object userState) {
            if ((this.SelectRepNameOperationCompleted == null)) {
                this.SelectRepNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectRepNameOperationCompleted);
            }
            this.InvokeAsync("SelectRepName", new object[] {
                        MetadataID}, this.SelectRepNameOperationCompleted, userState);
        }
        
        private void OnSelectRepNameOperationCompleted(object arg) {
            if ((this.SelectRepNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectRepNameCompleted(this, new SelectRepNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadDocumentFromServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadDocumentFromServer(string filePath) {
            object[] results = this.Invoke("DownloadDocumentFromServer", new object[] {
                        filePath});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadDocumentFromServerAsync(string filePath) {
            this.DownloadDocumentFromServerAsync(filePath, null);
        }
        
        /// <remarks/>
        public void DownloadDocumentFromServerAsync(string filePath, object userState) {
            if ((this.DownloadDocumentFromServerOperationCompleted == null)) {
                this.DownloadDocumentFromServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadDocumentFromServerOperationCompleted);
            }
            this.InvokeAsync("DownloadDocumentFromServer", new object[] {
                        filePath}, this.DownloadDocumentFromServerOperationCompleted, userState);
        }
        
        private void OnDownloadDocumentFromServerOperationCompleted(object arg) {
            if ((this.DownloadDocumentFromServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadDocumentFromServerCompleted(this, new DownloadDocumentFromServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check Document", RequestElementName="Check Document", RequestNamespace="http://tempuri.org/", ResponseElementName="Check DocumentResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Check DocumentResult")]
        public System.Data.DataSet CheckDocument(string Docname, int PageCount, int RepId) {
            object[] results = this.Invoke("CheckDocument", new object[] {
                        Docname,
                        PageCount,
                        RepId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocumentAsync(string Docname, int PageCount, int RepId) {
            this.CheckDocumentAsync(Docname, PageCount, RepId, null);
        }
        
        /// <remarks/>
        public void CheckDocumentAsync(string Docname, int PageCount, int RepId, object userState) {
            if ((this.CheckDocumentOperationCompleted == null)) {
                this.CheckDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocumentOperationCompleted);
            }
            this.InvokeAsync("CheckDocument", new object[] {
                        Docname,
                        PageCount,
                        RepId}, this.CheckDocumentOperationCompleted, userState);
        }
        
        private void OnCheckDocumentOperationCompleted(object arg) {
            if ((this.CheckDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocumentCompleted(this, new CheckDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check DocumentCentrum", RequestElementName="Check DocumentCentrum", RequestNamespace="http://tempuri.org/", ResponseElementName="Check DocumentCentrumResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Check DocumentCentrumResult")]
        public System.Data.DataSet CheckDocumentCentrum(string Docname, int RepId, int MetId, int CatId, int FolId) {
            object[] results = this.Invoke("CheckDocumentCentrum", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        CatId,
                        FolId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocumentCentrumAsync(string Docname, int RepId, int MetId, int CatId, int FolId) {
            this.CheckDocumentCentrumAsync(Docname, RepId, MetId, CatId, FolId, null);
        }
        
        /// <remarks/>
        public void CheckDocumentCentrumAsync(string Docname, int RepId, int MetId, int CatId, int FolId, object userState) {
            if ((this.CheckDocumentCentrumOperationCompleted == null)) {
                this.CheckDocumentCentrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocumentCentrumOperationCompleted);
            }
            this.InvokeAsync("CheckDocumentCentrum", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        CatId,
                        FolId}, this.CheckDocumentCentrumOperationCompleted, userState);
        }
        
        private void OnCheckDocumentCentrumOperationCompleted(object arg) {
            if ((this.CheckDocumentCentrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocumentCentrumCompleted(this, new CheckDocumentCentrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Select Folder", RequestElementName="Select Folder", RequestNamespace="http://tempuri.org/", ResponseElementName="Select FolderResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Select FolderResult")]
        public System.Data.DataTable selectFolderCentrum2(string FolderName, int MetatemplateID, int ParentFolderID, int CategoryID) {
            object[] results = this.Invoke("selectFolderCentrum2", new object[] {
                        FolderName,
                        MetatemplateID,
                        ParentFolderID,
                        CategoryID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void selectFolderCentrum2Async(string FolderName, int MetatemplateID, int ParentFolderID, int CategoryID) {
            this.selectFolderCentrum2Async(FolderName, MetatemplateID, ParentFolderID, CategoryID, null);
        }
        
        /// <remarks/>
        public void selectFolderCentrum2Async(string FolderName, int MetatemplateID, int ParentFolderID, int CategoryID, object userState) {
            if ((this.selectFolderCentrum2OperationCompleted == null)) {
                this.selectFolderCentrum2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectFolderCentrum2OperationCompleted);
            }
            this.InvokeAsync("selectFolderCentrum2", new object[] {
                        FolderName,
                        MetatemplateID,
                        ParentFolderID,
                        CategoryID}, this.selectFolderCentrum2OperationCompleted, userState);
        }
        
        private void OnselectFolderCentrum2OperationCompleted(object arg) {
            if ((this.selectFolderCentrum2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectFolderCentrum2Completed(this, new selectFolderCentrum2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Select Folder Centrum", RequestElementName="Select Folder Centrum", RequestNamespace="http://tempuri.org/", ResponseElementName="Select Folder CentrumResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Select Folder CentrumResult")]
        public System.Data.DataTable selectFolderCentrum(string FolderName, int MetatemplateID, int ParentFolder, int CategoryID) {
            object[] results = this.Invoke("selectFolderCentrum", new object[] {
                        FolderName,
                        MetatemplateID,
                        ParentFolder,
                        CategoryID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void selectFolderCentrumAsync(string FolderName, int MetatemplateID, int ParentFolder, int CategoryID) {
            this.selectFolderCentrumAsync(FolderName, MetatemplateID, ParentFolder, CategoryID, null);
        }
        
        /// <remarks/>
        public void selectFolderCentrumAsync(string FolderName, int MetatemplateID, int ParentFolder, int CategoryID, object userState) {
            if ((this.selectFolderCentrumOperationCompleted == null)) {
                this.selectFolderCentrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectFolderCentrumOperationCompleted);
            }
            this.InvokeAsync("selectFolderCentrum", new object[] {
                        FolderName,
                        MetatemplateID,
                        ParentFolder,
                        CategoryID}, this.selectFolderCentrumOperationCompleted, userState);
        }
        
        private void OnselectFolderCentrumOperationCompleted(object arg) {
            if ((this.selectFolderCentrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectFolderCentrumCompleted(this, new selectFolderCentrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get Pagecount of image", RequestElementName="Get Pagecount of image", RequestNamespace="http://tempuri.org/", ResponseElementName="Get Pagecount of imageResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Get Pagecount of imageResult")]
        public int FrameCount(string imageFileName) {
            object[] results = this.Invoke("FrameCount", new object[] {
                        imageFileName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void FrameCountAsync(string imageFileName) {
            this.FrameCountAsync(imageFileName, null);
        }
        
        /// <remarks/>
        public void FrameCountAsync(string imageFileName, object userState) {
            if ((this.FrameCountOperationCompleted == null)) {
                this.FrameCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFrameCountOperationCompleted);
            }
            this.InvokeAsync("FrameCount", new object[] {
                        imageFileName}, this.FrameCountOperationCompleted, userState);
        }
        
        private void OnFrameCountOperationCompleted(object arg) {
            if ((this.FrameCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FrameCountCompleted(this, new FrameCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload File To Server With Detail using SFTP", RequestElementName="Upload File To Server With Detail using SFTP", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload File To Server With Detail using SFTPResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload File To Server With Detail using SFTPResult")]
        public bool UploadDocumentToServerSFTP(Document objDocument) {
            object[] results = this.Invoke("UploadDocumentToServerSFTP", new object[] {
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServerSFTPAsync(Document objDocument) {
            this.UploadDocumentToServerSFTPAsync(objDocument, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServerSFTPAsync(Document objDocument, object userState) {
            if ((this.UploadDocumentToServerSFTPOperationCompleted == null)) {
                this.UploadDocumentToServerSFTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServerSFTPOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServerSFTP", new object[] {
                        objDocument}, this.UploadDocumentToServerSFTPOperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServerSFTPOperationCompleted(object arg) {
            if ((this.UploadDocumentToServerSFTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServerSFTPCompleted(this, new UploadDocumentToServerSFTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UploadDocumentToServer1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload File To Server With Detail", RequestElementName="Upload File To Server With Detail", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload File To Server With DetailResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload File To Server With DetailResult")]
        public bool UploadDocumentToServer([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] objFileByte, Document objDocument) {
            object[] results = this.Invoke("UploadDocumentToServer1", new object[] {
                        objFileByte,
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServer1Async(byte[] objFileByte, Document objDocument) {
            this.UploadDocumentToServer1Async(objFileByte, objDocument, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServer1Async(byte[] objFileByte, Document objDocument, object userState) {
            if ((this.UploadDocumentToServer1OperationCompleted == null)) {
                this.UploadDocumentToServer1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServer1OperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServer1", new object[] {
                        objFileByte,
                        objDocument}, this.UploadDocumentToServer1OperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServer1OperationCompleted(object arg) {
            if ((this.UploadDocumentToServer1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServer1Completed(this, new UploadDocumentToServer1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload File To Server With Detail For Centrum", RequestElementName="Upload File To Server With Detail For Centrum", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload File To Server With Detail For CentrumResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload File To Server With Detail For CentrumResult")]
        public bool UploadDocumentToServerCentrum([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] objFileByte, Document objDocument) {
            object[] results = this.Invoke("UploadDocumentToServerCentrum", new object[] {
                        objFileByte,
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServerCentrumAsync(byte[] objFileByte, Document objDocument) {
            this.UploadDocumentToServerCentrumAsync(objFileByte, objDocument, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServerCentrumAsync(byte[] objFileByte, Document objDocument, object userState) {
            if ((this.UploadDocumentToServerCentrumOperationCompleted == null)) {
                this.UploadDocumentToServerCentrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServerCentrumOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServerCentrum", new object[] {
                        objFileByte,
                        objDocument}, this.UploadDocumentToServerCentrumOperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServerCentrumOperationCompleted(object arg) {
            if ((this.UploadDocumentToServerCentrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServerCentrumCompleted(this, new UploadDocumentToServerCentrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUniqueFileName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUniqueFileName(string strExtension) {
            object[] results = this.Invoke("GetUniqueFileName", new object[] {
                        strExtension});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUniqueFileNameAsync(string strExtension) {
            this.GetUniqueFileNameAsync(strExtension, null);
        }
        
        /// <remarks/>
        public void GetUniqueFileNameAsync(string strExtension, object userState) {
            if ((this.GetUniqueFileNameOperationCompleted == null)) {
                this.GetUniqueFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUniqueFileNameOperationCompleted);
            }
            this.InvokeAsync("GetUniqueFileName", new object[] {
                        strExtension}, this.GetUniqueFileNameOperationCompleted, userState);
        }
        
        private void OnGetUniqueFileNameOperationCompleted(object arg) {
            if ((this.GetUniqueFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUniqueFileNameCompleted(this, new GetUniqueFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMetaData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMetaData(MetaData objMetaData) {
            object[] results = this.Invoke("InsertMetaData", new object[] {
                        objMetaData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMetaDataAsync(MetaData objMetaData) {
            this.InsertMetaDataAsync(objMetaData, null);
        }
        
        /// <remarks/>
        public void InsertMetaDataAsync(MetaData objMetaData, object userState) {
            if ((this.InsertMetaDataOperationCompleted == null)) {
                this.InsertMetaDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMetaDataOperationCompleted);
            }
            this.InvokeAsync("InsertMetaData", new object[] {
                        objMetaData}, this.InsertMetaDataOperationCompleted, userState);
        }
        
        private void OnInsertMetaDataOperationCompleted(object arg) {
            if ((this.InsertMetaDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMetaDataCompleted(this, new InsertMetaDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertDocument(Document objDocument) {
            object[] results = this.Invoke("InsertDocument", new object[] {
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDocumentAsync(Document objDocument) {
            this.InsertDocumentAsync(objDocument, null);
        }
        
        /// <remarks/>
        public void InsertDocumentAsync(Document objDocument, object userState) {
            if ((this.InsertDocumentOperationCompleted == null)) {
                this.InsertDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDocumentOperationCompleted);
            }
            this.InvokeAsync("InsertDocument", new object[] {
                        objDocument}, this.InsertDocumentOperationCompleted, userState);
        }
        
        private void OnInsertDocumentOperationCompleted(object arg) {
            if ((this.InsertDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDocumentCompleted(this, new InsertDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/select error documents", RequestElementName="select error documents", RequestNamespace="http://tempuri.org/", ResponseElementName="select error documentsResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("select error documentsResult")]
        public System.Data.DataTable SelectErrorDocs(string ErrorType) {
            object[] results = this.Invoke("SelectErrorDocs", new object[] {
                        ErrorType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectErrorDocsAsync(string ErrorType) {
            this.SelectErrorDocsAsync(ErrorType, null);
        }
        
        /// <remarks/>
        public void SelectErrorDocsAsync(string ErrorType, object userState) {
            if ((this.SelectErrorDocsOperationCompleted == null)) {
                this.SelectErrorDocsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectErrorDocsOperationCompleted);
            }
            this.InvokeAsync("SelectErrorDocs", new object[] {
                        ErrorType}, this.SelectErrorDocsOperationCompleted, userState);
        }
        
        private void OnSelectErrorDocsOperationCompleted(object arg) {
            if ((this.SelectErrorDocsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectErrorDocsCompleted(this, new SelectErrorDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertFolder(Folder objFolder) {
            object[] results = this.Invoke("InsertFolder", new object[] {
                        objFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertFolderAsync(Folder objFolder) {
            this.InsertFolderAsync(objFolder, null);
        }
        
        /// <remarks/>
        public void InsertFolderAsync(Folder objFolder, object userState) {
            if ((this.InsertFolderOperationCompleted == null)) {
                this.InsertFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFolderOperationCompleted);
            }
            this.InvokeAsync("InsertFolder", new object[] {
                        objFolder}, this.InsertFolderOperationCompleted, userState);
        }
        
        private void OnInsertFolderOperationCompleted(object arg) {
            if ((this.InsertFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFolderCompleted(this, new InsertFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertFolderAxisTrustee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertFolderAxisTrustee(Folder objFolder) {
            object[] results = this.Invoke("InsertFolderAxisTrustee", new object[] {
                        objFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertFolderAxisTrusteeAsync(Folder objFolder) {
            this.InsertFolderAxisTrusteeAsync(objFolder, null);
        }
        
        /// <remarks/>
        public void InsertFolderAxisTrusteeAsync(Folder objFolder, object userState) {
            if ((this.InsertFolderAxisTrusteeOperationCompleted == null)) {
                this.InsertFolderAxisTrusteeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFolderAxisTrusteeOperationCompleted);
            }
            this.InvokeAsync("InsertFolderAxisTrustee", new object[] {
                        objFolder}, this.InsertFolderAxisTrusteeOperationCompleted, userState);
        }
        
        private void OnInsertFolderAxisTrusteeOperationCompleted(object arg) {
            if ((this.InsertFolderAxisTrusteeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFolderAxisTrusteeCompleted(this, new InsertFolderAxisTrusteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertFolderCentrum", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertFolderCentrum(Folder objFolder) {
            object[] results = this.Invoke("InsertFolderCentrum", new object[] {
                        objFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertFolderCentrumAsync(Folder objFolder) {
            this.InsertFolderCentrumAsync(objFolder, null);
        }
        
        /// <remarks/>
        public void InsertFolderCentrumAsync(Folder objFolder, object userState) {
            if ((this.InsertFolderCentrumOperationCompleted == null)) {
                this.InsertFolderCentrumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFolderCentrumOperationCompleted);
            }
            this.InvokeAsync("InsertFolderCentrum", new object[] {
                        objFolder}, this.InsertFolderCentrumOperationCompleted, userState);
        }
        
        private void OnInsertFolderCentrumOperationCompleted(object arg) {
            if ((this.InsertFolderCentrumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFolderCentrumCompleted(this, new InsertFolderCentrumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadRepository", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadRepository() {
            object[] results = this.Invoke("LoadRepository", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadRepositoryAsync() {
            this.LoadRepositoryAsync(null);
        }
        
        /// <remarks/>
        public void LoadRepositoryAsync(object userState) {
            if ((this.LoadRepositoryOperationCompleted == null)) {
                this.LoadRepositoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadRepositoryOperationCompleted);
            }
            this.InvokeAsync("LoadRepository", new object[0], this.LoadRepositoryOperationCompleted, userState);
        }
        
        private void OnLoadRepositoryOperationCompleted(object arg) {
            if ((this.LoadRepositoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadRepositoryCompleted(this, new LoadRepositoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadMetaTemplate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadMetaTemplate(int intRepositoryID) {
            object[] results = this.Invoke("LoadMetaTemplate", new object[] {
                        intRepositoryID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadMetaTemplateAsync(int intRepositoryID) {
            this.LoadMetaTemplateAsync(intRepositoryID, null);
        }
        
        /// <remarks/>
        public void LoadMetaTemplateAsync(int intRepositoryID, object userState) {
            if ((this.LoadMetaTemplateOperationCompleted == null)) {
                this.LoadMetaTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadMetaTemplateOperationCompleted);
            }
            this.InvokeAsync("LoadMetaTemplate", new object[] {
                        intRepositoryID}, this.LoadMetaTemplateOperationCompleted, userState);
        }
        
        private void OnLoadMetaTemplateOperationCompleted(object arg) {
            if ((this.LoadMetaTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadMetaTemplateCompleted(this, new LoadMetaTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadCategory(int intMetaTemplateID) {
            object[] results = this.Invoke("LoadCategory", new object[] {
                        intMetaTemplateID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadCategoryAsync(int intMetaTemplateID) {
            this.LoadCategoryAsync(intMetaTemplateID, null);
        }
        
        /// <remarks/>
        public void LoadCategoryAsync(int intMetaTemplateID, object userState) {
            if ((this.LoadCategoryOperationCompleted == null)) {
                this.LoadCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCategoryOperationCompleted);
            }
            this.InvokeAsync("LoadCategory", new object[] {
                        intMetaTemplateID}, this.LoadCategoryOperationCompleted, userState);
        }
        
        private void OnLoadCategoryOperationCompleted(object arg) {
            if ((this.LoadCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCategoryCompleted(this, new LoadCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadFolder(int intMetaTemplateID, int intCategoryID) {
            object[] results = this.Invoke("LoadFolder", new object[] {
                        intMetaTemplateID,
                        intCategoryID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadFolderAsync(int intMetaTemplateID, int intCategoryID) {
            this.LoadFolderAsync(intMetaTemplateID, intCategoryID, null);
        }
        
        /// <remarks/>
        public void LoadFolderAsync(int intMetaTemplateID, int intCategoryID, object userState) {
            if ((this.LoadFolderOperationCompleted == null)) {
                this.LoadFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFolderOperationCompleted);
            }
            this.InvokeAsync("LoadFolder", new object[] {
                        intMetaTemplateID,
                        intCategoryID}, this.LoadFolderOperationCompleted, userState);
        }
        
        private void OnLoadFolderOperationCompleted(object arg) {
            if ((this.LoadFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFolderCompleted(this, new LoadFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFolderAxisTrustee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadFolderAxisTrustee(int intMetaTemplateID, int intCategoryID) {
            object[] results = this.Invoke("LoadFolderAxisTrustee", new object[] {
                        intMetaTemplateID,
                        intCategoryID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadFolderAxisTrusteeAsync(int intMetaTemplateID, int intCategoryID) {
            this.LoadFolderAxisTrusteeAsync(intMetaTemplateID, intCategoryID, null);
        }
        
        /// <remarks/>
        public void LoadFolderAxisTrusteeAsync(int intMetaTemplateID, int intCategoryID, object userState) {
            if ((this.LoadFolderAxisTrusteeOperationCompleted == null)) {
                this.LoadFolderAxisTrusteeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFolderAxisTrusteeOperationCompleted);
            }
            this.InvokeAsync("LoadFolderAxisTrustee", new object[] {
                        intMetaTemplateID,
                        intCategoryID}, this.LoadFolderAxisTrusteeOperationCompleted, userState);
        }
        
        private void OnLoadFolderAxisTrusteeOperationCompleted(object arg) {
            if ((this.LoadFolderAxisTrusteeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFolderAxisTrusteeCompleted(this, new LoadFolderAxisTrusteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadMetaDataCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadMetaDataCode(MetaData objMetaData) {
            object[] results = this.Invoke("LoadMetaDataCode", new object[] {
                        objMetaData});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadMetaDataCodeAsync(MetaData objMetaData) {
            this.LoadMetaDataCodeAsync(objMetaData, null);
        }
        
        /// <remarks/>
        public void LoadMetaDataCodeAsync(MetaData objMetaData, object userState) {
            if ((this.LoadMetaDataCodeOperationCompleted == null)) {
                this.LoadMetaDataCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadMetaDataCodeOperationCompleted);
            }
            this.InvokeAsync("LoadMetaDataCode", new object[] {
                        objMetaData}, this.LoadMetaDataCodeOperationCompleted, userState);
        }
        
        private void OnLoadMetaDataCodeOperationCompleted(object arg) {
            if ((this.LoadMetaDataCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadMetaDataCodeCompleted(this, new LoadMetaDataCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LoadDocument(string query) {
            object[] results = this.Invoke("LoadDocument", new object[] {
                        query});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LoadDocumentAsync(string query) {
            this.LoadDocumentAsync(query, null);
        }
        
        /// <remarks/>
        public void LoadDocumentAsync(string query, object userState) {
            if ((this.LoadDocumentOperationCompleted == null)) {
                this.LoadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDocumentOperationCompleted);
            }
            this.InvokeAsync("LoadDocument", new object[] {
                        query}, this.LoadDocumentOperationCompleted, userState);
        }
        
        private void OnLoadDocumentOperationCompleted(object arg) {
            if ((this.LoadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDocumentCompleted(this, new LoadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable AuthenticateUser(string userName, string password) {
            object[] results = this.Invoke("AuthenticateUser", new object[] {
                        userName,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string userName, string password) {
            this.AuthenticateUserAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateUserAsync(string userName, string password, object userState) {
            if ((this.AuthenticateUserOperationCompleted == null)) {
                this.AuthenticateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateUserOperationCompleted);
            }
            this.InvokeAsync("AuthenticateUser", new object[] {
                        userName,
                        password}, this.AuthenticateUserOperationCompleted, userState);
        }
        
        private void OnAuthenticateUserOperationCompleted(object arg) {
            if ((this.AuthenticateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateUserCompleted(this, new AuthenticateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolderIfNeeded", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFolderIfNeeded(string filename) {
            this.Invoke("CreateFolderIfNeeded", new object[] {
                        filename});
        }
        
        /// <remarks/>
        public void CreateFolderIfNeededAsync(string filename) {
            this.CreateFolderIfNeededAsync(filename, null);
        }
        
        /// <remarks/>
        public void CreateFolderIfNeededAsync(string filename, object userState) {
            if ((this.CreateFolderIfNeededOperationCompleted == null)) {
                this.CreateFolderIfNeededOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderIfNeededOperationCompleted);
            }
            this.InvokeAsync("CreateFolderIfNeeded", new object[] {
                        filename}, this.CreateFolderIfNeededOperationCompleted, userState);
        }
        
        private void OnCreateFolderIfNeededOperationCompleted(object arg) {
            if ((this.CreateFolderIfNeededCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderIfNeededCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload Files of AxisTrustee To Server With Detail", RequestElementName="Upload Files of AxisTrustee To Server With Detail", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload Files of AxisTrustee To Server With DetailResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload Files of AxisTrustee To Server With DetailResult")]
        public bool UploadDocumentToServer_AxisTrustee([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] objFileByte, Document objDocument) {
            object[] results = this.Invoke("UploadDocumentToServer_AxisTrustee", new object[] {
                        objFileByte,
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServer_AxisTrusteeAsync(byte[] objFileByte, Document objDocument) {
            this.UploadDocumentToServer_AxisTrusteeAsync(objFileByte, objDocument, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServer_AxisTrusteeAsync(byte[] objFileByte, Document objDocument, object userState) {
            if ((this.UploadDocumentToServer_AxisTrusteeOperationCompleted == null)) {
                this.UploadDocumentToServer_AxisTrusteeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServer_AxisTrusteeOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServer_AxisTrustee", new object[] {
                        objFileByte,
                        objDocument}, this.UploadDocumentToServer_AxisTrusteeOperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServer_AxisTrusteeOperationCompleted(object arg) {
            if ((this.UploadDocumentToServer_AxisTrusteeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServer_AxisTrusteeCompleted(this, new UploadDocumentToServer_AxisTrusteeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Upload Folders To Server With files&Detail", RequestElementName="Upload Folders To Server With files&Detail", RequestNamespace="http://tempuri.org/", ResponseElementName="Upload Folders To Server With files&DetailResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Upload Folders To Server With files&DetailResult")]
        public bool UploadDocumentToServer_FolderWise([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] objFileByte, Document objDocument) {
            object[] results = this.Invoke("UploadDocumentToServer_FolderWise", new object[] {
                        objFileByte,
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentToServer_FolderWiseAsync(byte[] objFileByte, Document objDocument) {
            this.UploadDocumentToServer_FolderWiseAsync(objFileByte, objDocument, null);
        }
        
        /// <remarks/>
        public void UploadDocumentToServer_FolderWiseAsync(byte[] objFileByte, Document objDocument, object userState) {
            if ((this.UploadDocumentToServer_FolderWiseOperationCompleted == null)) {
                this.UploadDocumentToServer_FolderWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentToServer_FolderWiseOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentToServer_FolderWise", new object[] {
                        objFileByte,
                        objDocument}, this.UploadDocumentToServer_FolderWiseOperationCompleted, userState);
        }
        
        private void OnUploadDocumentToServer_FolderWiseOperationCompleted(object arg) {
            if ((this.UploadDocumentToServer_FolderWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentToServer_FolderWiseCompleted(this, new UploadDocumentToServer_FolderWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertFolderForOthers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertFolderForOthers(Folder objFolder) {
            object[] results = this.Invoke("InsertFolderForOthers", new object[] {
                        objFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertFolderForOthersAsync(Folder objFolder) {
            this.InsertFolderForOthersAsync(objFolder, null);
        }
        
        /// <remarks/>
        public void InsertFolderForOthersAsync(Folder objFolder, object userState) {
            if ((this.InsertFolderForOthersOperationCompleted == null)) {
                this.InsertFolderForOthersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertFolderForOthersOperationCompleted);
            }
            this.InvokeAsync("InsertFolderForOthers", new object[] {
                        objFolder}, this.InsertFolderForOthersOperationCompleted, userState);
        }
        
        private void OnInsertFolderForOthersOperationCompleted(object arg) {
            if ((this.InsertFolderForOthersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertFolderForOthersCompleted(this, new InsertFolderForOthersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check Document_Reliance", RequestElementName="Check Document_Reliance", RequestNamespace="http://tempuri.org/", ResponseElementName="Check Document_RelianceResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Check Document_RelianceResult")]
        public System.Data.DataSet CheckDocument_Reliance(string Docname, int RepId, int MetId, int CatId) {
            object[] results = this.Invoke("CheckDocument_Reliance", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        CatId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocument_RelianceAsync(string Docname, int RepId, int MetId, int CatId) {
            this.CheckDocument_RelianceAsync(Docname, RepId, MetId, CatId, null);
        }
        
        /// <remarks/>
        public void CheckDocument_RelianceAsync(string Docname, int RepId, int MetId, int CatId, object userState) {
            if ((this.CheckDocument_RelianceOperationCompleted == null)) {
                this.CheckDocument_RelianceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocument_RelianceOperationCompleted);
            }
            this.InvokeAsync("CheckDocument_Reliance", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        CatId}, this.CheckDocument_RelianceOperationCompleted, userState);
        }
        
        private void OnCheckDocument_RelianceOperationCompleted(object arg) {
            if ((this.CheckDocument_RelianceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocument_RelianceCompleted(this, new CheckDocument_RelianceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check Document_SBI Mutual Fund Trustee Company Private limited" +
            "", RequestElementName="Check Document_SBI Mutual Fund Trustee Company Private limited", RequestNamespace="http://tempuri.org/", ResponseElementName="Check Document_SBI Mutual Fund Trustee Company Private limitedResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Check Document_SBI Mutual Fund Trustee Company Private limitedResult")]
        public System.Data.DataSet CheckDocument_SBIMutual(string Docname, int RepId, int MetId, int Folderid) {
            object[] results = this.Invoke("CheckDocument_SBIMutual", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        Folderid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocument_SBIMutualAsync(string Docname, int RepId, int MetId, int Folderid) {
            this.CheckDocument_SBIMutualAsync(Docname, RepId, MetId, Folderid, null);
        }
        
        /// <remarks/>
        public void CheckDocument_SBIMutualAsync(string Docname, int RepId, int MetId, int Folderid, object userState) {
            if ((this.CheckDocument_SBIMutualOperationCompleted == null)) {
                this.CheckDocument_SBIMutualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocument_SBIMutualOperationCompleted);
            }
            this.InvokeAsync("CheckDocument_SBIMutual", new object[] {
                        Docname,
                        RepId,
                        MetId,
                        Folderid}, this.CheckDocument_SBIMutualOperationCompleted, userState);
        }
        
        private void OnCheckDocument_SBIMutualOperationCompleted(object arg) {
            if ((this.CheckDocument_SBIMutualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocument_SBIMutualCompleted(this, new CheckDocument_SBIMutualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check IDBI Bank Ltd", RequestElementName="Check IDBI Bank Ltd", RequestNamespace="http://tempuri.org/", ResponseElementName="Check IDBI Bank LtdResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Check IDBI Bank LtdResult")]
        public System.Data.DataSet CheckDocument_IDBI(string Docname, int MetId, int RepId) {
            object[] results = this.Invoke("CheckDocument_IDBI", new object[] {
                        Docname,
                        MetId,
                        RepId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocument_IDBIAsync(string Docname, int MetId, int RepId) {
            this.CheckDocument_IDBIAsync(Docname, MetId, RepId, null);
        }
        
        /// <remarks/>
        public void CheckDocument_IDBIAsync(string Docname, int MetId, int RepId, object userState) {
            if ((this.CheckDocument_IDBIOperationCompleted == null)) {
                this.CheckDocument_IDBIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocument_IDBIOperationCompleted);
            }
            this.InvokeAsync("CheckDocument_IDBI", new object[] {
                        Docname,
                        MetId,
                        RepId}, this.CheckDocument_IDBIOperationCompleted, userState);
        }
        
        private void OnCheckDocument_IDBIOperationCompleted(object arg) {
            if ((this.CheckDocument_IDBICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocument_IDBICompleted(this, new CheckDocument_IDBICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CorruptFile or duplicate file catch entry IDBI Ahmedabad", RequestElementName="CorruptFile or duplicate file catch entry IDBI Ahmedabad", RequestNamespace="http://tempuri.org/", ResponseElementName="CorruptFile or duplicate file catch entry IDBI AhmedabadResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ErrorDocument_IDBIAhm(string MetatemplateName, string DocName, string ErrorType) {
            this.Invoke("ErrorDocument_IDBIAhm", new object[] {
                        MetatemplateName,
                        DocName,
                        ErrorType});
        }
        
        /// <remarks/>
        public void ErrorDocument_IDBIAhmAsync(string MetatemplateName, string DocName, string ErrorType) {
            this.ErrorDocument_IDBIAhmAsync(MetatemplateName, DocName, ErrorType, null);
        }
        
        /// <remarks/>
        public void ErrorDocument_IDBIAhmAsync(string MetatemplateName, string DocName, string ErrorType, object userState) {
            if ((this.ErrorDocument_IDBIAhmOperationCompleted == null)) {
                this.ErrorDocument_IDBIAhmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnErrorDocument_IDBIAhmOperationCompleted);
            }
            this.InvokeAsync("ErrorDocument_IDBIAhm", new object[] {
                        MetatemplateName,
                        DocName,
                        ErrorType}, this.ErrorDocument_IDBIAhmOperationCompleted, userState);
        }
        
        private void OnErrorDocument_IDBIAhmOperationCompleted(object arg) {
            if ((this.ErrorDocument_IDBIAhmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ErrorDocument_IDBIAhmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/get docid and metadataid", RequestElementName="get docid and metadataid", RequestNamespace="http://tempuri.org/", ResponseElementName="get docid and metadataidResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("get docid and metadataidResult")]
        public System.Data.DataTable SelectDocumentID(string DocName, int RepId) {
            object[] results = this.Invoke("SelectDocumentID", new object[] {
                        DocName,
                        RepId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectDocumentIDAsync(string DocName, int RepId) {
            this.SelectDocumentIDAsync(DocName, RepId, null);
        }
        
        /// <remarks/>
        public void SelectDocumentIDAsync(string DocName, int RepId, object userState) {
            if ((this.SelectDocumentIDOperationCompleted == null)) {
                this.SelectDocumentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectDocumentIDOperationCompleted);
            }
            this.InvokeAsync("SelectDocumentID", new object[] {
                        DocName,
                        RepId}, this.SelectDocumentIDOperationCompleted, userState);
        }
        
        private void OnSelectDocumentIDOperationCompleted(object arg) {
            if ((this.SelectDocumentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectDocumentIDCompleted(this, new SelectDocumentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/excel entry IDBI Ahmedabad", RequestElementName="excel entry IDBI Ahmedabad", RequestNamespace="http://tempuri.org/", ResponseElementName="excel entry IDBI AhmedabadResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExcelEntry_IDBIAhm(int DocumentId, int MetadataId, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName) {
            this.Invoke("ExcelEntry_IDBIAhm", new object[] {
                        DocumentId,
                        MetadataId,
                        DateOfRecievalAtRpu,
                        DateOfAccOpening,
                        Custid,
                        AccNo,
                        BoxNo,
                        DocNo,
                        SHIL_Barcode,
                        SHCIL_Barcode_Date,
                        CloseFlag,
                        ExcelName});
        }
        
        /// <remarks/>
        public void ExcelEntry_IDBIAhmAsync(int DocumentId, int MetadataId, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName) {
            this.ExcelEntry_IDBIAhmAsync(DocumentId, MetadataId, DateOfRecievalAtRpu, DateOfAccOpening, Custid, AccNo, BoxNo, DocNo, SHIL_Barcode, SHCIL_Barcode_Date, CloseFlag, ExcelName, null);
        }
        
        /// <remarks/>
        public void ExcelEntry_IDBIAhmAsync(int DocumentId, int MetadataId, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName, object userState) {
            if ((this.ExcelEntry_IDBIAhmOperationCompleted == null)) {
                this.ExcelEntry_IDBIAhmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExcelEntry_IDBIAhmOperationCompleted);
            }
            this.InvokeAsync("ExcelEntry_IDBIAhm", new object[] {
                        DocumentId,
                        MetadataId,
                        DateOfRecievalAtRpu,
                        DateOfAccOpening,
                        Custid,
                        AccNo,
                        BoxNo,
                        DocNo,
                        SHIL_Barcode,
                        SHCIL_Barcode_Date,
                        CloseFlag,
                        ExcelName}, this.ExcelEntry_IDBIAhmOperationCompleted, userState);
        }
        
        private void OnExcelEntry_IDBIAhmOperationCompleted(object arg) {
            if ((this.ExcelEntry_IDBIAhmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExcelEntry_IDBIAhmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/check if docid is already present in excelentry", RequestElementName="check if docid is already present in excelentry", RequestNamespace="http://tempuri.org/", ResponseElementName="check if docid is already present in excelentryResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("check if docid is already present in excelentryResult")]
        public System.Data.DataTable SelectDocIdInExcel(int DocId) {
            object[] results = this.Invoke("SelectDocIdInExcel", new object[] {
                        DocId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SelectDocIdInExcelAsync(int DocId) {
            this.SelectDocIdInExcelAsync(DocId, null);
        }
        
        /// <remarks/>
        public void SelectDocIdInExcelAsync(int DocId, object userState) {
            if ((this.SelectDocIdInExcelOperationCompleted == null)) {
                this.SelectDocIdInExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectDocIdInExcelOperationCompleted);
            }
            this.InvokeAsync("SelectDocIdInExcel", new object[] {
                        DocId}, this.SelectDocIdInExcelOperationCompleted, userState);
        }
        
        private void OnSelectDocIdInExcelOperationCompleted(object arg) {
            if ((this.SelectDocIdInExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectDocIdInExcelCompleted(this, new SelectDocIdInExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/duplicate docid insert in excelentry error table", RequestElementName="duplicate docid insert in excelentry error table", RequestNamespace="http://tempuri.org/", ResponseElementName="duplicate docid insert in excelentry error tableResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertInExcelEntry_Error_IDBI_Ahm(int DocumentId, int MetadataId, string ErrorName, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName) {
            this.Invoke("InsertInExcelEntry_Error_IDBI_Ahm", new object[] {
                        DocumentId,
                        MetadataId,
                        ErrorName,
                        DateOfRecievalAtRpu,
                        DateOfAccOpening,
                        Custid,
                        AccNo,
                        BoxNo,
                        DocNo,
                        SHIL_Barcode,
                        SHCIL_Barcode_Date,
                        CloseFlag,
                        ExcelName});
        }
        
        /// <remarks/>
        public void InsertInExcelEntry_Error_IDBI_AhmAsync(int DocumentId, int MetadataId, string ErrorName, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName) {
            this.InsertInExcelEntry_Error_IDBI_AhmAsync(DocumentId, MetadataId, ErrorName, DateOfRecievalAtRpu, DateOfAccOpening, Custid, AccNo, BoxNo, DocNo, SHIL_Barcode, SHCIL_Barcode_Date, CloseFlag, ExcelName, null);
        }
        
        /// <remarks/>
        public void InsertInExcelEntry_Error_IDBI_AhmAsync(int DocumentId, int MetadataId, string ErrorName, System.DateTime DateOfRecievalAtRpu, System.DateTime DateOfAccOpening, string Custid, string AccNo, string BoxNo, string DocNo, string SHIL_Barcode, string SHCIL_Barcode_Date, string CloseFlag, string ExcelName, object userState) {
            if ((this.InsertInExcelEntry_Error_IDBI_AhmOperationCompleted == null)) {
                this.InsertInExcelEntry_Error_IDBI_AhmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInExcelEntry_Error_IDBI_AhmOperationCompleted);
            }
            this.InvokeAsync("InsertInExcelEntry_Error_IDBI_Ahm", new object[] {
                        DocumentId,
                        MetadataId,
                        ErrorName,
                        DateOfRecievalAtRpu,
                        DateOfAccOpening,
                        Custid,
                        AccNo,
                        BoxNo,
                        DocNo,
                        SHIL_Barcode,
                        SHCIL_Barcode_Date,
                        CloseFlag,
                        ExcelName}, this.InsertInExcelEntry_Error_IDBI_AhmOperationCompleted, userState);
        }
        
        private void OnInsertInExcelEntry_Error_IDBI_AhmOperationCompleted(object arg) {
            if ((this.InsertInExcelEntry_Error_IDBI_AhmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInExcelEntry_Error_IDBI_AhmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get erroneous docs list", RequestElementName="Get erroneous docs list", RequestNamespace="http://tempuri.org/", ResponseElementName="Get erroneous docs listResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Get erroneous docs listResult")]
        public System.Data.DataTable GetErrorDocs() {
            object[] results = this.Invoke("GetErrorDocs", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetErrorDocsAsync() {
            this.GetErrorDocsAsync(null);
        }
        
        /// <remarks/>
        public void GetErrorDocsAsync(object userState) {
            if ((this.GetErrorDocsOperationCompleted == null)) {
                this.GetErrorDocsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetErrorDocsOperationCompleted);
            }
            this.InvokeAsync("GetErrorDocs", new object[0], this.GetErrorDocsOperationCompleted, userState);
        }
        
        private void OnGetErrorDocsOperationCompleted(object arg) {
            if ((this.GetErrorDocsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetErrorDocsCompleted(this, new GetErrorDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get missing Entry Docs List", RequestElementName="Get missing Entry Docs List", RequestNamespace="http://tempuri.org/", ResponseElementName="Get missing Entry Docs ListResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Get missing Entry Docs ListResult")]
        public System.Data.DataTable GetDocEntryStatus() {
            object[] results = this.Invoke("GetDocEntryStatus", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocEntryStatusAsync() {
            this.GetDocEntryStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetDocEntryStatusAsync(object userState) {
            if ((this.GetDocEntryStatusOperationCompleted == null)) {
                this.GetDocEntryStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocEntryStatusOperationCompleted);
            }
            this.InvokeAsync("GetDocEntryStatus", new object[0], this.GetDocEntryStatusOperationCompleted, userState);
        }
        
        private void OnGetDocEntryStatusOperationCompleted(object arg) {
            if ((this.GetDocEntryStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocEntryStatusCompleted(this, new GetDocEntryStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/check if docname is present in excelentry", RequestElementName="check if docname is present in excelentry", RequestNamespace="http://tempuri.org/", ResponseElementName="check if docname is present in excelentryResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("check if docname is present in excelentryResult")]
        public System.Data.DataTable CheckDocNameInExcel(string DocName) {
            object[] results = this.Invoke("CheckDocNameInExcel", new object[] {
                        DocName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDocNameInExcelAsync(string DocName) {
            this.CheckDocNameInExcelAsync(DocName, null);
        }
        
        /// <remarks/>
        public void CheckDocNameInExcelAsync(string DocName, object userState) {
            if ((this.CheckDocNameInExcelOperationCompleted == null)) {
                this.CheckDocNameInExcelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDocNameInExcelOperationCompleted);
            }
            this.InvokeAsync("CheckDocNameInExcel", new object[] {
                        DocName}, this.CheckDocNameInExcelOperationCompleted, userState);
        }
        
        private void OnCheckDocNameInExcelOperationCompleted(object arg) {
            if ((this.CheckDocNameInExcelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDocNameInExcelCompleted(this, new CheckDocNameInExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/update document status", RequestElementName="update document status", RequestNamespace="http://tempuri.org/", ResponseElementName="update document statusResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("update document statusResult")]
        public bool UpdateDocumentStatusId(Document objDocument) {
            object[] results = this.Invoke("UpdateDocumentStatusId", new object[] {
                        objDocument});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDocumentStatusIdAsync(Document objDocument) {
            this.UpdateDocumentStatusIdAsync(objDocument, null);
        }
        
        /// <remarks/>
        public void UpdateDocumentStatusIdAsync(Document objDocument, object userState) {
            if ((this.UpdateDocumentStatusIdOperationCompleted == null)) {
                this.UpdateDocumentStatusIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDocumentStatusIdOperationCompleted);
            }
            this.InvokeAsync("UpdateDocumentStatusId", new object[] {
                        objDocument}, this.UpdateDocumentStatusIdOperationCompleted, userState);
        }
        
        private void OnUpdateDocumentStatusIdOperationCompleted(object arg) {
            if ((this.UpdateDocumentStatusIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDocumentStatusIdCompleted(this, new UpdateDocumentStatusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Document {
        
        private int documentIDField;
        
        private int metaDataIDField;
        
        private string documentNameField;
        
        private string documentGuidField;
        
        private int sizeField;
        
        private string documentPathField;
        
        private string documentTypeField;
        
        private byte[] imageField;
        
        private System.DateTime createdOnField;
        
        private int createdByField;
        
        private System.DateTime updatedOnField;
        
        private int updatedByField;
        
        private int documentStatusIDField;
        
        private int statusField;
        
        private string tagField;
        
        private int isLucenedField;
        
        private int pageCountField;
        
        private int outPutValuuesField;
        
        private string showcountField;
        
        private string searchTypeField;
        
        private int versionNoField;
        
        private int oldPageCountField;
        
        private int idField;
        
        private int mergedByField;
        
        private int mergedPageCountField;
        
        private string iPAddressField;
        
        /// <remarks/>
        public int DocumentID {
            get {
                return this.documentIDField;
            }
            set {
                this.documentIDField = value;
            }
        }
        
        /// <remarks/>
        public int MetaDataID {
            get {
                return this.metaDataIDField;
            }
            set {
                this.metaDataIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentName {
            get {
                return this.documentNameField;
            }
            set {
                this.documentNameField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentGuid {
            get {
                return this.documentGuidField;
            }
            set {
                this.documentGuidField = value;
            }
        }
        
        /// <remarks/>
        public int Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentPath {
            get {
                return this.documentPathField;
            }
            set {
                this.documentPathField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
            }
        }
        
        /// <remarks/>
        public int CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdatedOn {
            get {
                return this.updatedOnField;
            }
            set {
                this.updatedOnField = value;
            }
        }
        
        /// <remarks/>
        public int UpdatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentStatusID {
            get {
                return this.documentStatusIDField;
            }
            set {
                this.documentStatusIDField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public int IsLucened {
            get {
                return this.isLucenedField;
            }
            set {
                this.isLucenedField = value;
            }
        }
        
        /// <remarks/>
        public int PageCount {
            get {
                return this.pageCountField;
            }
            set {
                this.pageCountField = value;
            }
        }
        
        /// <remarks/>
        public int OutPutValuues {
            get {
                return this.outPutValuuesField;
            }
            set {
                this.outPutValuuesField = value;
            }
        }
        
        /// <remarks/>
        public string showcount {
            get {
                return this.showcountField;
            }
            set {
                this.showcountField = value;
            }
        }
        
        /// <remarks/>
        public string SearchType {
            get {
                return this.searchTypeField;
            }
            set {
                this.searchTypeField = value;
            }
        }
        
        /// <remarks/>
        public int VersionNo {
            get {
                return this.versionNoField;
            }
            set {
                this.versionNoField = value;
            }
        }
        
        /// <remarks/>
        public int OldPageCount {
            get {
                return this.oldPageCountField;
            }
            set {
                this.oldPageCountField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MergedBy {
            get {
                return this.mergedByField;
            }
            set {
                this.mergedByField = value;
            }
        }
        
        /// <remarks/>
        public int MergedPageCount {
            get {
                return this.mergedPageCountField;
            }
            set {
                this.mergedPageCountField = value;
            }
        }
        
        /// <remarks/>
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Folder {
        
        private int folderIDField;
        
        private string folderNameField;
        
        private string folderDescriptionField;
        
        private int metaTemplateIDField;
        
        private int parentFolderIDField;
        
        private System.DateTime createdOnField;
        
        private int createdByField;
        
        private System.DateTime updatedOnField;
        
        private int updatedByField;
        
        private int statusField;
        
        private int categoryIDField;
        
        /// <remarks/>
        public int FolderID {
            get {
                return this.folderIDField;
            }
            set {
                this.folderIDField = value;
            }
        }
        
        /// <remarks/>
        public string FolderName {
            get {
                return this.folderNameField;
            }
            set {
                this.folderNameField = value;
            }
        }
        
        /// <remarks/>
        public string FolderDescription {
            get {
                return this.folderDescriptionField;
            }
            set {
                this.folderDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int MetaTemplateID {
            get {
                return this.metaTemplateIDField;
            }
            set {
                this.metaTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public int ParentFolderID {
            get {
                return this.parentFolderIDField;
            }
            set {
                this.parentFolderIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
            }
        }
        
        /// <remarks/>
        public int CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdatedOn {
            get {
                return this.updatedOnField;
            }
            set {
                this.updatedOnField = value;
            }
        }
        
        /// <remarks/>
        public int UpdatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int CategoryID {
            get {
                return this.categoryIDField;
            }
            set {
                this.categoryIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9032.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MetaData {
        
        private int metaDataIDField;
        
        private string metaDataCodeField;
        
        private int repositoryIDField;
        
        private int metaTemplateIDField;
        
        private int folderIDField;
        
        private int categoryIDField;
        
        private System.DateTime createdOnField;
        
        private int createdByField;
        
        private System.DateTime updatedOnField;
        
        private int updatedByField;
        
        private int documentStatusIDField;
        
        private int statusField;
        
        private int newPageIndexField;
        
        /// <remarks/>
        public int MetaDataID {
            get {
                return this.metaDataIDField;
            }
            set {
                this.metaDataIDField = value;
            }
        }
        
        /// <remarks/>
        public string MetaDataCode {
            get {
                return this.metaDataCodeField;
            }
            set {
                this.metaDataCodeField = value;
            }
        }
        
        /// <remarks/>
        public int RepositoryID {
            get {
                return this.repositoryIDField;
            }
            set {
                this.repositoryIDField = value;
            }
        }
        
        /// <remarks/>
        public int MetaTemplateID {
            get {
                return this.metaTemplateIDField;
            }
            set {
                this.metaTemplateIDField = value;
            }
        }
        
        /// <remarks/>
        public int FolderID {
            get {
                return this.folderIDField;
            }
            set {
                this.folderIDField = value;
            }
        }
        
        /// <remarks/>
        public int CategoryID {
            get {
                return this.categoryIDField;
            }
            set {
                this.categoryIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
            }
        }
        
        /// <remarks/>
        public int CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdatedOn {
            get {
                return this.updatedOnField;
            }
            set {
                this.updatedOnField = value;
            }
        }
        
        /// <remarks/>
        public int UpdatedBy {
            get {
                return this.updatedByField;
            }
            set {
                this.updatedByField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentStatusID {
            get {
                return this.documentStatusIDField;
            }
            set {
                this.documentStatusIDField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int NewPageIndex {
            get {
                return this.newPageIndexField;
            }
            set {
                this.newPageIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServerCompletedEventHandler(object sender, UploadDocumentToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SelectRepNameCompletedEventHandler(object sender, SelectRepNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectRepNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectRepNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DownloadDocumentFromServerCompletedEventHandler(object sender, DownloadDocumentFromServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadDocumentFromServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadDocumentFromServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocumentCompletedEventHandler(object sender, CheckDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocumentCentrumCompletedEventHandler(object sender, CheckDocumentCentrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocumentCentrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocumentCentrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void selectFolderCentrum2CompletedEventHandler(object sender, selectFolderCentrum2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectFolderCentrum2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectFolderCentrum2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void selectFolderCentrumCompletedEventHandler(object sender, selectFolderCentrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectFolderCentrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectFolderCentrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void FrameCountCompletedEventHandler(object sender, FrameCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FrameCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FrameCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServerSFTPCompletedEventHandler(object sender, UploadDocumentToServerSFTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServerSFTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServerSFTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServer1CompletedEventHandler(object sender, UploadDocumentToServer1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServer1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServer1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServerCentrumCompletedEventHandler(object sender, UploadDocumentToServerCentrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServerCentrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServerCentrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetUniqueFileNameCompletedEventHandler(object sender, GetUniqueFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUniqueFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUniqueFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertMetaDataCompletedEventHandler(object sender, InsertMetaDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertDocumentCompletedEventHandler(object sender, InsertDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SelectErrorDocsCompletedEventHandler(object sender, SelectErrorDocsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectErrorDocsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectErrorDocsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertFolderCompletedEventHandler(object sender, InsertFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertFolderAxisTrusteeCompletedEventHandler(object sender, InsertFolderAxisTrusteeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertFolderAxisTrusteeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertFolderAxisTrusteeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertFolderCentrumCompletedEventHandler(object sender, InsertFolderCentrumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertFolderCentrumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertFolderCentrumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadRepositoryCompletedEventHandler(object sender, LoadRepositoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadRepositoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadRepositoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadMetaTemplateCompletedEventHandler(object sender, LoadMetaTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadMetaTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadMetaTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadCategoryCompletedEventHandler(object sender, LoadCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadFolderCompletedEventHandler(object sender, LoadFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadFolderAxisTrusteeCompletedEventHandler(object sender, LoadFolderAxisTrusteeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFolderAxisTrusteeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadFolderAxisTrusteeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadMetaDataCodeCompletedEventHandler(object sender, LoadMetaDataCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadMetaDataCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadMetaDataCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void LoadDocumentCompletedEventHandler(object sender, LoadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AuthenticateUserCompletedEventHandler(object sender, AuthenticateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CreateFolderIfNeededCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServer_AxisTrusteeCompletedEventHandler(object sender, UploadDocumentToServer_AxisTrusteeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServer_AxisTrusteeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServer_AxisTrusteeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadDocumentToServer_FolderWiseCompletedEventHandler(object sender, UploadDocumentToServer_FolderWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentToServer_FolderWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentToServer_FolderWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertFolderForOthersCompletedEventHandler(object sender, InsertFolderForOthersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertFolderForOthersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertFolderForOthersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocument_RelianceCompletedEventHandler(object sender, CheckDocument_RelianceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocument_RelianceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocument_RelianceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocument_SBIMutualCompletedEventHandler(object sender, CheckDocument_SBIMutualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocument_SBIMutualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocument_SBIMutualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocument_IDBICompletedEventHandler(object sender, CheckDocument_IDBICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocument_IDBICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocument_IDBICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ErrorDocument_IDBIAhmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SelectDocumentIDCompletedEventHandler(object sender, SelectDocumentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectDocumentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectDocumentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void ExcelEntry_IDBIAhmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SelectDocIdInExcelCompletedEventHandler(object sender, SelectDocIdInExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectDocIdInExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectDocIdInExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void InsertInExcelEntry_Error_IDBI_AhmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetErrorDocsCompletedEventHandler(object sender, GetErrorDocsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetErrorDocsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetErrorDocsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetDocEntryStatusCompletedEventHandler(object sender, GetDocEntryStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocEntryStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocEntryStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void CheckDocNameInExcelCompletedEventHandler(object sender, CheckDocNameInExcelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDocNameInExcelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDocNameInExcelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UpdateDocumentStatusIdCompletedEventHandler(object sender, UpdateDocumentStatusIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDocumentStatusIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDocumentStatusIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591